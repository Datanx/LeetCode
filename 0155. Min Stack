/// Using two stacks
/// We have one regular stack for push, pop and top operations
/// We have another stack for getMin operations, which named minStack
/// minStack will store the current min value in the stack
///
/// Time Complexity: push: O(1)
///                  pop:  O(1)
///                  top:  O(1)
///                  getMin: O(1)
/// Space Complexity: O(n)

class MinStack {
public:
    /** initialize your data structure here. */
    MinStack() {
        while(!normalStack.empty())
            normalStack.pop();
        
        while(!minStack.empty())
            minStack.pop();
    }
    
    void push(int x) {
        normalStack.push(x);
        if(minStack.empty())
            minStack.push(x);
        else
            minStack.push(min(minStack.top(), x));
    }
    
    int pop() {
        assert(normalStack.size() > 0);
        
        int v = normalStack.top();
        normalStack.pop();
        minStack.pop();
        
        return v;
    }
    
    int top() {
        assert(normalStack.size() > 0);
        return normalStack.top();
    }
    
    int getMin() {
        assert(normalStack.size() > 0);
        return minStack.top();
    }
    
private:
    stack<int> normalStack;
    stack<int> minStack;
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
