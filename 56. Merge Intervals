/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
bool intervalCmp(const Interval& interval1, const Interval& interval2){
        if(interval1.start != interval2.start)
            return interval1.start < interval2.start;
        return interval1.end < interval2.end;
    }

class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        if(intervals.size() <= 1)
            return intervals;
        sort(intervals.begin(), intervals.end(), intervalCmp);
        
        vector<Interval> res;
        res.push_back(intervals[0]);
        for(int i = 1; i < intervals.size(); i++){
            if(cross(res.back(), intervals[i])){
                Interval newInterval = mergeInterval(res.back(), intervals[i]);
                res.pop_back();
                res.push_back(newInterval);
            }
            else
                res.push_back(intervals[i]);
        }
        return res;
    }

private:
    bool cross(const Interval& interval1, const Interval& interval2){
        return interval2.start <= interval1.end;
    }
    
    Interval mergeInterval(const Interval& interval1, const Interval& interval2){
        return Interval(min(interval1.start, interval2.start), max(interval1.end, interval2.end));
    }
};
