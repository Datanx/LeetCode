/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
private:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2){
        ListNode* dummyHead = new ListNode(INT_MIN);
        for(ListNode* ptr = dummyHead; l1 != NULL || l2 != NULL; ptr = ptr->next){
            int val1 = l1 == NULL ? INT_MAX: l1->val;
            int val2 = l2 == NULL ? INT_MAX: l2->val;
            if(val1 <= val2){
                ptr->next = l1;
                l1 = l1->next;
            }
            else{
                ptr->next = l2;
                l2 = l2->next;
            }
        }
        
        ListNode* retNode = dummyHead->next;
        delete dummyHead;
        return retNode;
    }
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL)
            return head;
        
        ListNode* fast = head, *slow = head;
        while(fast->next != NULL && fast->next->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        
        fast = slow;
        slow = slow->next;
        fast->next = NULL;
        
        ListNode* l1 = sortList(head);
        ListNode* l2 = sortList(slow);
        
        return mergeTwoLists(l1, l2);
    }
};
