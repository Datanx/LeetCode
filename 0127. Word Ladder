class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> toVisit(wordList.begin(), wordList.end());
        
        if(toVisit.find(endWord) == toVisit.end())
            return 0;
        
        queue<pair<string, int>> queue1;
        queue1.push(make_pair(beginWord, 1));
        while(!queue1.empty()){
            string curNode = queue1.front().first;
            int step = queue1.front().second;
            queue1.pop();
            if(isTransformable(endWord, curNode))
                return step + 1;
            
            for(auto s = toVisit.begin(); s != toVisit.end();){
                if(isTransformable(*s, curNode)){
                    queue1.push(make_pair(*s, step + 1));
                    s = toVisit.erase(s);
                }
                else
                    s++;
            }
        }
        return 0;
    }
    
private:
    bool isTransformable(string s1, string s2){
        int diffCount = 0;
        for(int i = 0; i < s1.length(); i++){
            if(s1[i] != s2[i])
                diffCount++;
        }
        return diffCount == 1;
    }
    
};
