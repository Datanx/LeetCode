/// Vector to stroe all elements
/// HashMap to restore all maps between elements and index
/// Time Complexity: O(1)
/// Space Complexity: O(n)
class RandomizedSet {
private:
    vector<int> nums;
    unordered_map<int, int> index;
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        nums.clear();
        index.clear();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(index.find(val) == index.end()){
            nums.push_back(val);
            index[val] = nums.size() - 1;
            return true;
        }
        return false;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(index.find(val) != index.end()){
            int i = index[val];
            index.erase(val);
            
            int num = nums.back();
            nums.pop_back();
            
            if(num != val){
                nums[i] = num;
                index[num] = i;
            }
            return true;
        }
        return false;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int rndIndex = rand() % nums.size();
        return nums[rndIndex];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
