/// Recursively call generateParenthesis for smaller n
/// Time Complexity: O(2^n)
/// Space Complexity: O(2^n)
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        if(n == 0)
            return {};
        
        vector<string> res; 
        
        for(int i = 0; i < n; i++){
            vector<string> left = generateParenthesis(i);
            if(left.size() == 0)
                left.push_back("");
            vector<string> right = generateParenthesis(n - i - 1);
            if(right.size() == 0)
                right.push_back("");
            for(const string& l : left)
                for(const string& r : right)
                    res.push_back("(" + l + ")" + r);
        }
        return res;
    }
};
