class Solution {
private:
    vector<vector<int>> res;
    void dfs(vector<int>& candidates, int start, int target, vector<int>& result){
        if(target == 0){
            res.push_back(result);
            return;
        }
        
        for(int i = start; i < candidates.size() && target >= candidates[i]; i++){
            if(i != start && candidates[i] ==candidates[i-1])
                continue;
            result.push_back(candidates[i]);
            dfs(candidates, i+1, target-candidates[i], result);
            result.pop_back();
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<int> result;
        dfs(candidates, 0, target, result);
        return res;
    }
};
