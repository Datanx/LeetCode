class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
		int n = obstacleGrid[0].size();
		if (m == 0 || n == 0)
			return 0;
		vector<vector<int>>dp(m, vector<int>(n));
		dp[0][0] = obstacleGrid[0][0] == 1 ? 0 : 1;
		for (int i = 0; i < m; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (i >= 1 && j >= 1)
				{
					if (obstacleGrid[i][j] == 0)
						dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
					else
						dp[i][j] = 0;
				}
				else if (i >= 1)//考虑边界条件
				{
					if (obstacleGrid[i][j] == 0)
						dp[i][j] = dp[i - 1][j];
					else
						dp[i][j] = 0;
				}
				else if (j >= 1)//考虑边界条件
				{
					if (obstacleGrid[i][j] == 0)
						dp[i][j] = dp[i][j - 1];
					else
						dp[i][j] = 0;
				}
			}
		}
		return dp[m - 1][n - 1];
    }
};
