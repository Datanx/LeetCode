class Solution {
private:
    bool isPalindrome(const string& str, int begin, int end){
        if(begin < 0 || begin > end || end >= str.length())
            return false;
        while(begin < end)
            if(str[begin++] != str[end--])
                return false;
        return true;
    }
    
    void dfs(const string& s, int index, vector<string>& mid, vector<vector<string>>& res){
        if(index == s.size()){
            res.push_back(mid);
            return;
        }
        
        for(int i = index; i < s.size(); i++){
            if(isPalindrome(s, index, i)){
                mid.push_back(s.substr(index, i-index+1));
                dfs(s, i+1, mid, res);
                mid.pop_back();
            }
        }
    }
    
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        if(s.empty())
            return res;
        
        vector<string> mid;
        dfs(s, 0, mid, res);
        
        return res;
    }
};
