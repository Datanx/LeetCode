class Solution {
public:

	// Encodes a URL to a shortened URL.
	string encode(string longUrl) {
		if (url2code.find(longUrl) != url2code.end())
			return url2code[longUrl];
		string res;
		do {
			res = "";
			for (int i = 0; i < 6; i++) {
				int r = (int)((double)rand() / 32767 * dict.length());
				res += dict[r];
			}
		} while (code2url.find(res) != code2url.end());

		url2code[longUrl] = res;
		code2url[res] = longUrl;
		return tinyPrefix + res;
	}

	// Decodes a shortened URL to its original URL.
	string decode(string shortUrl) {
		return code2url[shortUrl.substr(shortUrl.length() - 6)];
	}

private:
	unordered_map<string, string> url2code;
	unordered_map<string, string> code2url;
	string dict = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	string tinyPrefix = "https://tinyurl.com/";
};
